# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core


# jobs:
# - job: Windows
#   pool:
#     vmImage: 'vs2017-win2016'
#   steps:
#   - script: echo hello from Windows
# - job: macOS
#   pool:
#     vmImage: 'macOS-10.13'
#   steps:
#   - script: echo hello from macOS
# - job: Linux
#   pool:
#     vmImage: 'ubuntu-16.04'
#   steps:
#   - script: echo hello from Windows

# Test Condition
# jobs:
# - job: A
#   steps:
#   - script: exit 1

# - job: B
#   dependsOn: A
#   condition: failed()
#   steps:
#   - script: echo this will run when A fails

# - job: C
#   dependsOn:
#   - A
#   - B
#   condition: succeeded('B')
#   steps:
#   - script: echo this will run when B runs and succeeds

# - job: test
#   timeoutInMinutes: 10
#   cancelTimeoutInMinutes: 2

# Test muiltiple configuration
# jobs:
# - job: Test
#   strategy:
#     maxParallel: 2
#     matrix:
#       US_IE:
#         Location: US
#         Browser: IE
#       US_Chrome:
#         Location: US
#         Browser: Chrome
#       Europe_Chrome:
#         Location: Europe
#         Browser: Chrome

#Artifact download
# test and upload my code as an artifact named WebSite
# jobs:
# - job: Build
#   pool:
#     vmImage: 'ubuntu-16.04'
#   steps:
#   - script: npm test
#   - task: PublishBuildArtifacts@1
#     displayName: PublishBuildArtifacts
#     inputs:
#      PathtoPublish: '$(System.DefaultWorkingDirectory)'
#      artifactName: WebSite

# # download the artifact and deploy it only if the build job succeeded
# - job: deploy
#   pool:
#     vmImage: 'ubuntu-16.04'
#   steps:
#   - checkout: none
#   - task: DownloadBuildArtifacts@0
#     displayName: 'DownLoad Build Artifacts'
#     inputs:
#       artifactName: WebSite
#       downloadPath: $(System.DefaultWorkingDirectory)

#   dependsOn: Build
#   condition: succeeded()

# Access to OAuth token
steps:
- powershell: |
    $url = "$($env:SYSTEM_TEAMFOUNDATIONCOLLECTIONURI)$env:SYSTEM_TEAMPROJECTIED/_apis/build/definitions/$($env:SYSTEM_DEFINITIONID)?api-version=4.1-preview"
    Write-Host "URL: $url"
    $pipeline = Invoke-RestMethod -Uri $url -Headeres @{
      Authorization = "Bearer $env:TOKEN"
    }
    Write-Host "Pipeline = $($pipeline | ConvertTo-Json -Depth 100)"
  env:
    TOKEN: $(system.accesstoken)